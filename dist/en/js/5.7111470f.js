(window.webpackJsonp=window.webpackJsonp||[]).push([[5],{398:function(n,e){n.exports='\x3c!--\ntitle: How To Use Admin Plugin\nsort: 2\n--\x3e\n\nThe Admin plugin can help you to quickly generate a database data table for adding, deleting, and changing database data tables.\n\n## Quick Start\n\nFollowing the steps:\n\n- Generate a configuration file corresponding to the data table\n- Set access routing\n- Initialize and load in the engine\n- Set access menu\n\n### Generate configuration file\n\nSuppose you have a data table users in your database, such as:\n\n```sql\nCREATE TABLE `users` (\n  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,\n  `name` varchar(50) COLLATE utf8mb4_unicode_ci DEFAULT NULL,\n  `gender` tinyint(4) DEFAULT NULL,\n  `city` varchar(50) COLLATE utf8mb4_unicode_ci DEFAULT NULL,\n  `ip` varchar(20) COLLATE utf8mb4_unicode_ci DEFAULT NULL,\n  `phone` varchar(10) COLLATE utf8mb4_unicode_ci DEFAULT NULL,\n  `created_at` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,\n  `updated_at` timestamp NULL DEFAULT NULL,\n  PRIMARY KEY (`id`)\n) ENGINE=InnoDB AUTO_INCREMENT=0 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;\n```\n\nUse the command line tools - admincli to help you quickly generate configuration files:\n\n- install\n\n```bash\ngo install github.com/chenhg5/go-admin/admincli\n```\n\n- generate\n\n<br>\nExecute in the project folder\n\n```bash\nadmincli generate\n```\n\nFill in the information according to the prompts. After the run, a file ```users.go``` will be generated. This is the configuration file corresponding to the data table. How to configure it is described in detail later.\n\n### Set access url\n\nAfter the configuration file is generated, a routing configuration file ```tables.go``` will also be generated :\n\n```go\npackage main\n\nimport "github.com/chenhg5/go-admin/plugins/admin/models"\n\n// The key of Generators is the prefix of table info url.\n// The corresponding value is the Form and Table data.\n//\n// http://{{config.DOMAIN}}:{{PORT}}/{{config.PREFIX}}/info/{{key}}\n//\n// example:\n//\n// "posts"   => http://localhost:9033/admin/info/posts\n// "authors" => http://localhost:9033/admin/info/authors\n//\nvar Generators = map[string]models.TableGenerator{\n\t"user":    GetUserTable,\n}\n```\n\n```"user"``` is the corresponding access route prefix, ```GetUserTable``` is the table data generation method.\nThe corresponding access routing address is: http://localhost:9033/admin/info/users\n\n### Initialize and load in the engine\n\nTo initialize, you need to call the ```NewAdmin``` method, and then pass the ```Generators``` above. Then call the engine\'s ```AddPlugins``` method to load the engine.\n\n```go\npackage main\n\nimport (\n\t"github.com/gin-gonic/gin"\n\t_ "github.com/chenhg5/go-admin/adapter/gin"\n\t"github.com/chenhg5/go-admin/engine"\n\t"github.com/chenhg5/go-admin/plugins/admin"\n\t"github.com/chenhg5/go-admin/modules/config"\n\t"github.com/chenhg5/go-admin/modules/language"\n)\n\nfunc main() {\n\tr := gin.Default()\n\teng := engine.Default()\n\tcfg := config.Config{\n\t\tDATABASE: []config.Database{\n\t\t\t{\n\t\t\t\tHOST:         "127.0.0.1",\n\t\t\t\tPORT:         "3306",\n\t\t\t\tUSER:         "root",\n\t\t\t\tPWD:          "root",\n\t\t\t\tNAME:         "godmin",\n\t\t\t\tMAX_IDLE_CON: 50,\n\t\t\t\tMAX_OPEN_CON: 150,\n\t\t\t\tDRIVER:       "mysql",\n\t\t\t},\n\t\t},\n\t\tDOMAIN: "localhost", \n\t\tPREFIX: "admin", \n\t\tSTORE: config.Store{\n\t\t\tPATH:   "./uploads",\n\t\t\tPREFIX: "uploads",\n\t\t},\n\t\tLANGUAGE: language.CN,\n\t}\n\n\tadminPlugin := admin.NewAdmin(Generators)\n\n\t// AddGenerator can also be used to load the Generator, like:\n\t// adminPlugin.AddGenerator("user", GetUserTable)\n\t\n\teng.AddConfig(cfg).\n\t\tAddPlugins(adminPlugin).  // 加载插件\n\t\tUse(r)\n\n\tr.Run(":9033")\n}\n```\n\n### Set access menu\n\nAfter running, access the login URL, enter the menu management page, and set the management menu of the data table to enter in the sidebar.\n\n> PS:\n>\n> In the above example, the login URL is http://localhost:9033/admin/login\n>\n> The menu management page is http://localhost:9033/admin/menu\n\n## Introduction to the business data table generation method file\n\n```go\npackage main\n\nimport (\n\t"github.com/chenhg5/go-admin/template/types"\n\t"github.com/chenhg5/go-admin/plugins/admin/models"\n)\n\nfunc GetUsersTable() (usersTable models.Table) {\n\n\tuserTable = models.NewDefaultTable(models.DefaultTableConfig)\n\tusersTable.GetInfo().FieldList = []types.Field{}\n\n\tusersTable.GetInfo().Table = "users"\n\tusersTable.GetInfo().Title = "Users"\n\tusersTable.GetInfo().Description = "Users"\n\n\tusersTable.GetForm().FormList = []types.Form{}\n\n\tusersTable.GetForm().Table = "users"\n\tusersTable.GetForm().Title = "Users"\n\tusersTable.GetForm().Description = "Users"\n\n\treturn\n}\n```\n\nThe business data table generation method is a function that returns a type object of ```models.Table```. The following is the definition of ```models.Table```:\n\n```go\ntype Table interface {\n\tGetInfo() *types.InfoPanel\n\tGetForm() *types.FormPanel\n\tGetCanAdd() bool\n\tGetEditable() bool\n\tGetDeletable() bool\n\tGetFiltersMap() []map[string]string\n\tGetDataFromDatabase(path string, params *Parameters) PanelInfo\n\tGetDataFromDatabaseWithId(id string) ([]types.Form, string, string)\n\tUpdateDataFromDatabase(dataList map[string][]string)\n\tInsertDataFromDatabase(dataList map[string][]string)\n\tDeleteDataFromDatabase(id string)\n}\n```\n\nIt mainly includes ```GetInfo()``` and ```GetForm()```. The ui corresponding to the type returned by these two functions is the table for displaying data and the form for editing new data. The screenshots are as follows:\n\n- This is the ```Info```.\n\n<br>\n\n![](http://quizfile.dadadaa.cn/everyday/app/jlds/img/006tNbRwly1fxoy26qnc5j31y60u0q91.jpg)\n\n- This is the ```Form```.\n\n<br>\n\n![](http://quizfile.dadadaa.cn/everyday/app/jlds/img/006tNbRwly1fxoy2w3cobj318k0ooabv.jpg)\n\n### Info\n\n```go\ntype InfoPanel struct {\n\tFieldList   []Field \n\tTable       string  \n\tTitle       string  \n\tDescription string  \n}\n\ntype Field struct {\n\tFilterFn  FieldFilterFn   \n\tField    string           \n\tTypeName string           \n\tHead     string           \n\tSortable bool             \n\tFilter   bool             \n}\n```\n\n### Form\n\n```go\ntype FormPanel struct {\n\tFormList   []Form    \n\tTable       string   \n\tTitle       string   \n\tDescription string   \n}\n\ntype Form struct {\n\tField    string                \n\tTypeName string                \n\tHead     string                \n\tDefault  string                \n\tEditable bool                  \n\tFormType string                \n\tValue    string                \n\tOptions  []map[string]string   \n\tFilterFn  FieldFilterFn        \n\tPostFun  FieldFilterFn         \n}\n```\n\nThe currently supported form types are:\n\n- default\n- normal text\n- Single selection\n- Password\n- rich text\n- File\n- double selection box\n- Multiple choices\n- icon drop-down selection box\n- time selection box\n- radio selection box\n- email input box\n- url input box\n- ip input box\n- color selection box\n- Currency input box\n- Digital input box\n\n</br>\n\nCan be used like this:\n\n```\n\nimport "github.com/chenhg5/go-admin/template/types/form"\n\n...\nFormType: form.File,\n...\n\n```\n\nFor the selection type: single selection, multiple selection, selection box, you need to specify the Options value. The format is:\n\n```\n...\nOptions: []map[string]string{\n\t{\n        "field": "name",\n        "value": "joe",\n    },{\n        "field": "name",\n        "value": "jane",\n    },\n}\n...\n```\n\nWhere field is the name of the field and value is the value corresponding to the selection.\n\n### Filter function FilterFn and processing function PostFun description\n\n```go\n// RowModel contains ID and value of the single query result.\ntype RowModel struct {\n\tID    int64\n\tValue string\n}\n\n// FieldFilterFn is filter function of data.\ntype FieldFilterFn func(value RowModel) interface{}\n```\n\nThe filter function receives a parameter, RowModel, which represents the current edit target line, contains the id and the displayed value, and the return value of the filter function is the default value displayed by the final form line.\nIn the table, you can customize the html return.\nIn the form, for non-selected form types, you must return string. For single-select, multi-select, etc., select form type, return []string.\n\nThe processing function is the same as the filter function type. The data can be processed by the processing function after the form is submitted, and then the form is inserted.\n\n<br>\n\n> English is not my main language. If any typo or wrong translation you found, you can send a [issue](https://github.com/chenhg5/go-admin-docs/issues/new) to me or make a pr. I will very appreciate it.\n\n'}}]);