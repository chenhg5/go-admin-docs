(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{399:function(n,t){n.exports='\x3c!--\ntitle: Admin插件使用 \nsort: 2\n--\x3e\n\nadmin插件可以帮助你实现快速生成数据库数据表增删改查的Web数据管理平台。\n\n## 快速开始\n\n需要如下几步：\n\n- 生成数据表对应的配置文件\n- 设置访问路由\n- 初始化，并在引擎中加载\n- 设置访问菜单\n\n### 生成配置文件\n\n假设你的数据库里面有一个数据表users，如：\n\n```sql\nCREATE TABLE `users` (\n  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,\n  `name` varchar(50) COLLATE utf8mb4_unicode_ci DEFAULT NULL,\n  `gender` tinyint(4) DEFAULT NULL,\n  `city` varchar(50) COLLATE utf8mb4_unicode_ci DEFAULT NULL,\n  `ip` varchar(20) COLLATE utf8mb4_unicode_ci DEFAULT NULL,\n  `phone` varchar(10) COLLATE utf8mb4_unicode_ci DEFAULT NULL,\n  `created_at` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,\n  `updated_at` timestamp NULL DEFAULT NULL,\n  PRIMARY KEY (`id`)\n) ENGINE=InnoDB AUTO_INCREMENT=3635 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;\n```\n\n使用自带的命令行工具可以帮助你快速生成配置文件，如：\n\n- 安装\n\n```bash\ngo install github.com/chenhg5/go-admin/admincli\n```\n\n- 生成\n\n<br>\n在项目文件夹下执行\n\n```bash\nadmincli generate\n```\n\n根据提示填写信息，运行完之后，会生成一个文件```users.go```，这个就是对应数据表的配置文件了，关于如何配置，在后面详细介绍。\n\n### 设置访问路由\n\n生成完配置文件后，同时也会生成一个路由配置文件```tables.go```，如：\n\n```go\npackage main\n\nimport "github.com/chenhg5/go-admin/plugins/admin/models"\n\n// The key of Generators is the prefix of table info url.\n// The corresponding value is the Form and Table data.\n//\n// http://{{config.DOMAIN}}:{{PORT}}/{{config.PREFIX}}/info/{{key}}\n//\n// example:\n//\n// "posts"   => http://localhost:9033/admin/info/posts\n// "authors" => http://localhost:9033/admin/info/authors\n//\nvar Generators = map[string]models.TableGenerator{\n\t"user":    GetUserTable,\n}\n```\n\n其中，```"user"```就是对应的访问路由前缀，```GetUserTable```就是表格数据生成方法。\n对应的访问路由地址就是：http://localhost:9033/admin/info/users\n\n### 初始化，并在引擎中加载\n\n初始化，需要调用```NewAdmin```方法，然后将上面的```Generators```传进去即可。然后再调用引擎的```AddPlugins```方法加载引擎。\n\n```go\npackage main\n\nimport (\n\t"github.com/gin-gonic/gin"\n\t_ "github.com/chenhg5/go-admin/adapter/gin" // 必须引入，如若不引入，则需要自己定义\n\t"github.com/chenhg5/go-admin/engine"\n\t"github.com/chenhg5/go-admin/plugins/admin"\n\t"github.com/chenhg5/go-admin/modules/config"\n\t"github.com/chenhg5/go-admin/modules/language"\n)\n\nfunc main() {\n\tr := gin.Default()\n\teng := engine.Default()\n\tcfg := config.Config{\n\t\tDATABASE: []config.Database{\n\t\t\t{\n\t\t\t\tHOST:         "127.0.0.1",\n\t\t\t\tPORT:         "3306",\n\t\t\t\tUSER:         "root",\n\t\t\t\tPWD:          "root",\n\t\t\t\tNAME:         "godmin",\n\t\t\t\tMAX_IDLE_CON: 50,\n\t\t\t\tMAX_OPEN_CON: 150,\n\t\t\t\tDRIVER:       "mysql",\n\t\t\t},\n\t\t},\n\t\tDOMAIN: "localhost", // 是cookie相关的，访问网站的域名\n\t\tPREFIX: "admin", // 访问网站的前缀\n\t\t// STORE 必须设置且保证有写权限，否则增加不了新的管理员用户\n\t\tSTORE: config.Store{\n\t\t\tPATH:   "./uploads",\n\t\t\tPREFIX: "uploads",\n\t\t},\n\t\tLANGUAGE: language.CN,\n\t}\n\n\tadminPlugin := admin.NewAdmin(Generators)\n\n\t// 也可以调用 AddGenerator 方法加载\n\t// adminPlugin.AddGenerator("user", GetUserTable)\n\t\n\teng.AddConfig(cfg).\n\t\tAddPlugins(adminPlugin).  // 加载插件\n\t\tUse(r)\n\n\tr.Run(":9033")\n}\n```\n\n### 设置访问菜单\n\n运行起来后，访问登录网址，进入到菜单管理页面，设置好数据表的管理菜单就可以在侧边栏中进入了。\n\n> 注：\n>\n> 在以上例子中，登录网址为：http://localhost:9033/admin/login\n>\n> 菜单管理页面为：http://localhost:9033/admin/menu\n\n## 业务数据表生成方法文件介绍\n\n```go\npackage main\n\nimport (\n\t"github.com/chenhg5/go-admin/template/types"\n\t"github.com/chenhg5/go-admin/plugins/admin/models"\n)\n\nfunc GetUsersTable() (usersTable models.Table) {\n\n\tuserTable = models.NewDefaultTable(models.DefaultTableConfig)\n\tusersTable.GetInfo().FieldList = []types.Field{}\n\n\tusersTable.GetInfo().Table = "users"\n\tusersTable.GetInfo().Title = "Users"\n\tusersTable.GetInfo().Description = "Users"\n\n\tusersTable.GetForm().FormList = []types.Form{}\n\n\tusersTable.GetForm().Table = "users"\n\tusersTable.GetForm().Title = "Users"\n\tusersTable.GetForm().Description = "Users"\n\n\treturn\n}\n```\n\n业务数据表生成方法是一个函数，返回了```models.Table```这个类型对象。以下是```models.Table```的定义：\n\n```go\ntype Table interface {\n\tGetInfo() *types.InfoPanel\n\tGetForm() *types.FormPanel\n\tGetCanAdd() bool\n\tGetEditable() bool\n\tGetDeletable() bool\n\tGetFiltersMap() []map[string]string\n\tGetDataFromDatabase(path string, params *Parameters) PanelInfo\n\tGetDataFromDatabaseWithId(id string) ([]types.Form, string, string)\n\tUpdateDataFromDatabase(dataList map[string][]string)\n\tInsertDataFromDatabase(dataList map[string][]string)\n\tDeleteDataFromDatabase(id string)\n}\n```\n\n主要包括了```GetInfo()```和```GetForm()```，这两个函数返回的类型对应的ui就是显示数据的表格和编辑新建数据的表单，截图展示如下：\n\n- 此为```Info```表格\n\n<br>\n\n![](http://quizfile.dadadaa.cn/everyday/app/jlds/img/006tNbRwly1fxoy26qnc5j31y60u0q91.jpg)\n\n- 此为```Form```表单\n\n<br>\n\n![](http://quizfile.dadadaa.cn/everyday/app/jlds/img/006tNbRwly1fxoy2w3cobj318k0ooabv.jpg)\n\n### Info表格\n\n```go\ntype InfoPanel struct {\n\tFieldList   []Field  // 字段类型\n\tTable       string   // 表格\n\tTitle       string   // 标题\n\tDescription string   // 描述\n}\n\ntype Field struct {\n\tFilterFn  FieldFilterFn    // 过滤函数\n\tField    string            // 字段名\n\tTypeName string            // 字段类型名\n\tHead     string            // 标题\n\tSortable bool              // 是否可以排序\n\tFilter   bool              // 是否可以筛选\n}\n```\n\n### Form表单\n\n```go\ntype FormPanel struct {\n\tFormList   []Form    // 字段类型\n\tTable       string   // 表格\n\tTitle       string   // 标题\n\tDescription string   // 描述\n}\n\ntype Form struct {\n\tField    string                // 字段名\n\tTypeName string                // 字段类型名\n\tHead     string                // 标题\n\tDefault  string                // 默认\n\tEditable bool                  // 是否可编辑\n\tFormType string                // 表单类型\n\tValue    string                // 表单默认值\n\tOptions  []map[string]string   // 表单选项\n\tFilterFn  FieldFilterFn        // 过滤函数\n\tPostFun  FieldFilterFn         // 处理函数\n}\n```\n\n目前支持的表单类型有：\n\n- 默认\n- 普通文本\n- 单选\n- 密码\n- 富文本\n- 文件\n- 双选择框\n- 多选\n- icon下拉选择框\n- 时间选择框\n- radio选择框\n- email输入框\n- url输入框\n- ip输入框\n- 颜色选择框\n- 货币输入框\n- 数字输入框\n\n</br>\n\n可以这样子去引用：\n\n```\n\nimport "github.com/chenhg5/go-admin/template/types/form"\n\n...\nFormType: form.File,\n...\n\n```\n\n对于选择类型：单选、多选、选择框，需要指定 Options 值。格式为：\n\n```\n...\nOptions: []map[string]string{\n\t{\n        "field": "name",\n        "value": "张三",\n    },{\n        "field": "name",\n        "value": "李四",\n    },\n}\n...\n```\n\n其中，field为字段名，value为选择对应的值。\n\n### 过滤函数FilterFn与处理函数PostFun说明\n\n```go\n// RowModel contains ID and value of the single query result.\ntype RowModel struct {\n\tID    int64\n\tValue string\n}\n\n// FieldFilterFn is filter function of data.\ntype FieldFilterFn func(value RowModel) interface{}\n```\n\n过滤函数接收一个参数，RowModel，表示当前编辑目标行，包含了id和显示的value，而过滤函数的返回值即是最终表单行显示的默认值。\n在表格中，可以自定义html返回。\n在表单中，对于非选择的表单类型，须返回string，对于单选、多选等选择表单类型，则返回[]string。\n\n处理函数与过滤函数类型一样，可以通过处理函数对表单提交后的数据处理，之后再插入表单。\n\n'}}]);